// Code generated by protoc-gen-go.
// source: product.proto
// DO NOT EDIT!

/*
Package product is a generated protocol buffer package.

It is generated from these files:
	product.proto

It has these top-level messages:
	Product
	ResProduct
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event int32

const (
	Event_NONE           Event = 0
	Event_FIRST_PURCHASE Event = 1
)

var Event_name = map[int32]string{
	0: "NONE",
	1: "FIRST_PURCHASE",
}
var Event_value = map[string]int32{
	"NONE":           0,
	"FIRST_PURCHASE": 1,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// swagger:model product
type Product struct {
	// The id of the product
	//
	// required: true
	ProductID string `protobuf:"bytes,1,opt,name=productID" json:"productID,omitempty"`
	// The price of the product
	//
	// required: true
	Price float32 `protobuf:"fixed32,2,opt,name=price" json:"price,omitempty"`
	// The point of the product
	//
	// required: true
	ProductPoint int32 `protobuf:"varint,3,opt,name=productPoint" json:"productPoint,omitempty"`
	// The point earned by purchasing this product
	//
	// required: true
	EarnedPoint int32 `protobuf:"varint,4,opt,name=earnedPoint" json:"earnedPoint,omitempty"`
	// The bonus point of this product
	//
	// required: true
	BonusPoint int32 `protobuf:"varint,5,opt,name=bonusPoint" json:"bonusPoint,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Product) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

func (m *Product) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetProductPoint() int32 {
	if m != nil {
		return m.ProductPoint
	}
	return 0
}

func (m *Product) GetEarnedPoint() int32 {
	if m != nil {
		return m.EarnedPoint
	}
	return 0
}

func (m *Product) GetBonusPoint() int32 {
	if m != nil {
		return m.BonusPoint
	}
	return 0
}

// Response struct for products
//
// swagger:model resProduct
type ResProduct struct {
	// The event type
	//
	// required: true
	Event Event `protobuf:"varint,1,opt,name=event,enum=product.Event" json:"event,omitempty"`
	// Message for this product
	//
	// required: true
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	// Nested struct of products
	Products []*Product `protobuf:"bytes,3,rep,name=products" json:"products,omitempty"`
}

func (m *ResProduct) Reset()                    { *m = ResProduct{} }
func (m *ResProduct) String() string            { return proto.CompactTextString(m) }
func (*ResProduct) ProtoMessage()               {}
func (*ResProduct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResProduct) GetEvent() Event {
	if m != nil {
		return m.Event
	}
	return Event_NONE
}

func (m *ResProduct) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ResProduct) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func init() {
	proto.RegisterType((*Product)(nil), "product.Product")
	proto.RegisterType((*ResProduct)(nil), "product.ResProduct")
	proto.RegisterEnum("product.Event", Event_name, Event_value)
}

func init() { proto.RegisterFile("product.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0xcd, 0xba, 0xb8, 0xf5, 0x9d, 0x96, 0xf2, 0xe1, 0xa1, 0x07, 0x91, 0x50, 0x14, 0x8a,
	0xc8, 0x0e, 0xf3, 0x17, 0x88, 0x56, 0xdc, 0x65, 0x96, 0x6f, 0x7a, 0x16, 0xb7, 0x05, 0xd9, 0xc1,
	0xa6, 0xa4, 0x9d, 0x7f, 0xc8, 0x3f, 0x2a, 0x4b, 0xb2, 0xb9, 0xdd, 0xbe, 0xef, 0xc9, 0x93, 0x97,
	0x37, 0xc1, 0x79, 0x63, 0xcd, 0x6a, 0xb3, 0xec, 0xc6, 0x8d, 0x35, 0x9d, 0xa1, 0x41, 0x58, 0xf3,
	0x5f, 0x81, 0x41, 0xe5, 0x67, 0xba, 0x44, 0x1c, 0xf0, 0xf4, 0x29, 0x13, 0x4a, 0x14, 0x31, 0xff,
	0x03, 0xba, 0x80, 0x6c, 0xec, 0x7a, 0xa9, 0xb3, 0x9e, 0x12, 0x45, 0x8f, 0xfd, 0x42, 0x39, 0xce,
	0x82, 0x52, 0x99, 0x75, 0xdd, 0x65, 0x91, 0x12, 0x85, 0xe4, 0x23, 0x46, 0x0a, 0x23, 0xfd, 0x69,
	0x6b, 0xbd, 0xf2, 0x4a, 0xdf, 0x29, 0x87, 0x88, 0xae, 0x80, 0x85, 0xa9, 0x37, 0xad, 0x17, 0xa4,
	0x13, 0x0e, 0x48, 0x6e, 0x01, 0xd6, 0xed, 0xae, 0xe7, 0x35, 0xa4, 0xfe, 0xd1, 0x75, 0xe7, 0x3a,
	0x26, 0x93, 0x64, 0xbc, 0x7b, 0x5b, 0xb9, 0xa5, 0xec, 0x0f, 0x29, 0x45, 0xf4, 0xdd, 0x7e, 0xb9,
	0xb6, 0x31, 0x6f, 0x47, 0xba, 0xc3, 0x30, 0x98, 0x6d, 0x16, 0xa9, 0xa8, 0x18, 0x4d, 0xd2, 0xfd,
	0xd5, 0x90, 0xcd, 0x7b, 0xe3, 0xf6, 0x06, 0xd2, 0xe5, 0xd1, 0x10, 0xfd, 0xd9, 0xeb, 0xac, 0x4c,
	0x4f, 0x88, 0x90, 0x3c, 0x4f, 0x79, 0xfe, 0xf6, 0x51, 0xbd, 0xf3, 0xe3, 0xcb, 0xc3, 0xbc, 0x4c,
	0xc5, 0xe2, 0xd4, 0x7d, 0xe8, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x5b, 0xfd, 0xd8,
	0x61, 0x01, 0x00, 0x00,
}
